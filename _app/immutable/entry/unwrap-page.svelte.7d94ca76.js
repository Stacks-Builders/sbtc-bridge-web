import { S as SvelteComponentDev, i as init$1, s as safe_not_equal, d as dispatch_dev, G as validate_store, H as component_subscribe, v as validate_slots, N as createEventDispatcher, p as element, y as text, c as space, C as create_component, q as claim_element, r as children, z as claim_text, l as detach_dev, f as claim_space, D as claim_component, x as add_location, u as attr_dev, w as set_style, g as insert_hydration_dev, J as append_hydration_dev, W as set_input_value, E as mount_component, a6 as action_destroyer, L as listen_dev, A as set_data_dev, X as to_number, k as transition_in, h as transition_out, F as destroy_component, O as run_all, M as prevent_default, I as noop, Q as globals, o as onMount, e as empty, B as group_outros, j as check_outros } from '../chunks/index.3d25d054.js';
import { s as sbtcConfig } from '../chunks/stores.3318b909.js';
import { F as FeeDisplay, u as utils, g as getPublicKey, s as schnorr, P as PegTransaction, a as assert, S as Signature, r as recoverPublicKey, b as Principal, U as UTXOSelection, c as SbtcWalletDisplay, d as SignTransaction } from '../chunks/SbtcWalletDisplay.e29f7908.js';
import { T as TEST_NETWORK, N as NETWORK, h as hex, p as p2wpkh, b as Transaction, s as secp256k1, S as Script, O as OutScript, A as Address, c as explorerAddressUrl } from '../chunks/utils.7513f4f0.js';
import { b as fetchUtxoSet, c as fetchCurrentFeeRates } from '../chunks/bridge_api.00d99152.js';
import { b as base } from '../chunks/paths.2f474562.js';
import { p as pe, S, K, Z as Ze, b as Z, c as p, q as qe, X, a, C as Ce, y as ye } from '../chunks/index.227a7d99.js';
import { a as sha256 } from '../chunks/stacks.d784e5e7.js';

/* src/lib/components/unwrapper/PegOutAmount.svelte generated by Svelte v3.57.0 */
const file$2 = "src/lib/components/unwrapper/PegOutAmount.svelte";

// (47:8) {#if amtData.change > 0}
function create_if_block$2(ctx) {
	let span;
	let a;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			span = element("span");
			a = element("a");
			t = text("set max");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			a = claim_element(span_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "set max");
			a_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/");
			attr_dev(a, "class", "");
			add_location(a, file$2, 46, 38, 2105);
			add_location(span, file$2, 46, 32, 2099);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, a);
			append_hydration_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", prevent_default(/*click_handler*/ ctx[6]), false, true, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(47:8) {#if amtData.change > 0}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div5;
	let div2;
	let label0;
	let span0;
	let t0_value = /*amtData*/ ctx[0].label + "";
	let t0;
	let t1;
	let span1;
	let t2;
	let input0;
	let t3;
	let div1;
	let div0;
	let t4_value = /*amtData*/ ctx[0].info + "";
	let t4;
	let t5;
	let t6;
	let div4;
	let label1;
	let span2;
	let t7;
	let t8;
	let span3;
	let t9;
	let input1;
	let t10;
	let div3;
	let t11;
	let t12;
	let feedisplay;
	let current;
	let mounted;
	let dispose;
	let if_block = /*amtData*/ ctx[0].change > 0 && create_if_block$2(ctx);

	feedisplay = new FeeDisplay({
			props: {
				amtData: /*amtData*/ ctx[0],
				currentPeg: /*pegAmount*/ ctx[1]
			},
			$$inline: true
		});

	feedisplay.$on("fee_rate_updated", /*changeRate*/ ctx[3]);

	const block = {
		c: function create() {
			div5 = element("div");
			div2 = element("div");
			label0 = element("label");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			t2 = space();
			input0 = element("input");
			t3 = space();
			div1 = element("div");
			div0 = element("div");
			t4 = text(t4_value);
			t5 = space();
			if (if_block) if_block.c();
			t6 = space();
			div4 = element("div");
			label1 = element("label");
			span2 = element("span");
			t7 = text("sBTC Dust Amount");
			t8 = space();
			span3 = element("span");
			t9 = space();
			input1 = element("input");
			t10 = space();
			div3 = element("div");
			t11 = text("Tiny amount of bitcoin is sent to the sBTC wallet for book keeping purposes");
			t12 = space();
			create_component(feedisplay.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label0 = claim_element(div2_nodes, "LABEL", { for: true, class: true });
			var label0_nodes = children(label0);
			span0 = claim_element(label0_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, t0_value);
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(label0_nodes);

			span1 = claim_element(label0_nodes, "SPAN", {
				class: true,
				"data-bs-toggle": true,
				"data-bs-placement": true,
				"data-bs-custom-class": true,
				title: true
			});

			children(span1).forEach(detach_dev);
			label0_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);

			input0 = claim_element(div2_nodes, "INPUT", {
				type: true,
				id: true,
				class: true,
				autocomplete: true
			});

			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t4 = claim_text(div0_nodes, t4_value);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t6 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label1 = claim_element(div4_nodes, "LABEL", { for: true, class: true });
			var label1_nodes = children(label1);
			span2 = claim_element(label1_nodes, "SPAN", {});
			var span2_nodes = children(span2);
			t7 = claim_text(span2_nodes, "sBTC Dust Amount");
			span2_nodes.forEach(detach_dev);
			t8 = claim_space(label1_nodes);

			span3 = claim_element(label1_nodes, "SPAN", {
				class: true,
				"data-bs-toggle": true,
				"data-bs-placement": true,
				"data-bs-custom-class": true,
				title: true
			});

			children(span3).forEach(detach_dev);
			label1_nodes.forEach(detach_dev);
			t9 = claim_space(div4_nodes);

			input1 = claim_element(div4_nodes, "INPUT", {
				type: true,
				id: true,
				class: true,
				style: true
			});

			t10 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true, title: true });
			var div3_nodes = children(div3);
			t11 = claim_text(div3_nodes, "Tiny amount of bitcoin is sent to the sBTC wallet for book keeping purposes");
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t12 = claim_space(div5_nodes);
			claim_component(feedisplay.$$.fragment, div5_nodes);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span0, file$2, 40, 8, 1457);
			attr_dev(span1, "class", "pointer text-info");
			attr_dev(span1, "data-bs-toggle", "tooltip-ftux");
			attr_dev(span1, "data-bs-placement", "top");
			attr_dev(span1, "data-bs-custom-class", "custom-tooltip");
			attr_dev(span1, "title", "The amount of Bitcoin you want to swap for sBTC. The bitcoin is locked in the protocol and you convert your sBTC back to Bitcoin when you peg out.");
			add_location(span1, file$2, 41, 8, 1494);
			attr_dev(label0, "for", "transact-path");
			attr_dev(label0, "class", "d-flex justify-content-between");
			add_location(label0, file$2, 39, 6, 1382);
			attr_dev(input0, "type", "number");
			attr_dev(input0, "id", "from-address");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "autocomplete", "off");
			add_location(input0, file$2, 43, 6, 1802);
			attr_dev(div0, "class", "text-small");
			add_location(div0, file$2, 45, 8, 2022);
			attr_dev(div1, "class", "text-small d-flex justify-content-between");
			add_location(div1, file$2, 44, 6, 1958);
			attr_dev(div2, "class", "col-12");
			add_location(div2, file$2, 38, 4, 1355);
			add_location(span2, file$2, 52, 8, 2336);
			attr_dev(span3, "class", "pointer text-info");
			attr_dev(span3, "data-bs-toggle", "tooltip-ftux");
			attr_dev(span3, "data-bs-placement", "top");
			attr_dev(span3, "data-bs-custom-class", "custom-tooltip");
			attr_dev(span3, "title", "A tiny amount of bitoin is sent to the sBTC to keep track of sBTC transactions.");
			add_location(span3, file$2, 53, 8, 2374);
			attr_dev(label1, "for", "transact-path");
			attr_dev(label1, "class", "d-flex justify-content-between");
			add_location(label1, file$2, 51, 6, 2261);
			attr_dev(input1, "type", "number");
			input1.readOnly = true;
			attr_dev(input1, "id", "dust");
			attr_dev(input1, "class", "form-control");
			set_style(input1, "background", "#999");
			add_location(input1, file$2, 55, 6, 2615);
			attr_dev(div3, "class", "text-small");
			attr_dev(div3, "title", "Required for book keeping.");
			add_location(div3, file$2, 56, 6, 2735);
			attr_dev(div4, "class", "mt-5 col-12");
			add_location(div4, file$2, 50, 4, 2229);
			attr_dev(div5, "class", "row");
			add_location(div5, file$2, 37, 2, 1333);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div5, anchor);
			append_hydration_dev(div5, div2);
			append_hydration_dev(div2, label0);
			append_hydration_dev(label0, span0);
			append_hydration_dev(span0, t0);
			append_hydration_dev(label0, t1);
			append_hydration_dev(label0, span1);
			append_hydration_dev(div2, t2);
			append_hydration_dev(div2, input0);
			set_input_value(input0, /*pegAmount*/ ctx[1]);
			append_hydration_dev(div2, t3);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t4);
			append_hydration_dev(div1, t5);
			if (if_block) if_block.m(div1, null);
			append_hydration_dev(div5, t6);
			append_hydration_dev(div5, div4);
			append_hydration_dev(div4, label1);
			append_hydration_dev(label1, span2);
			append_hydration_dev(span2, t7);
			append_hydration_dev(label1, t8);
			append_hydration_dev(label1, span3);
			append_hydration_dev(div4, t9);
			append_hydration_dev(div4, input1);
			set_input_value(input1, /*amtData*/ ctx[0].dust);
			append_hydration_dev(div4, t10);
			append_hydration_dev(div4, div3);
			append_hydration_dev(div3, t11);
			append_hydration_dev(div5, t12);
			mount_component(feedisplay, div5, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(init.call(null, input0)),
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
					listen_dev(input0, "input", /*input_handler*/ ctx[5], false, false, false, false),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*amtData*/ 1) && t0_value !== (t0_value = /*amtData*/ ctx[0].label + "")) set_data_dev(t0, t0_value);

			if (dirty & /*pegAmount*/ 2 && to_number(input0.value) !== /*pegAmount*/ ctx[1]) {
				set_input_value(input0, /*pegAmount*/ ctx[1]);
			}

			if ((!current || dirty & /*amtData*/ 1) && t4_value !== (t4_value = /*amtData*/ ctx[0].info + "")) set_data_dev(t4, t4_value);

			if (/*amtData*/ ctx[0].change > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*amtData*/ 1 && to_number(input1.value) !== /*amtData*/ ctx[0].dust) {
				set_input_value(input1, /*amtData*/ ctx[0].dust);
			}

			const feedisplay_changes = {};
			if (dirty & /*amtData*/ 1) feedisplay_changes.amtData = /*amtData*/ ctx[0];
			if (dirty & /*pegAmount*/ 2) feedisplay_changes.currentPeg = /*pegAmount*/ ctx[1];
			feedisplay.$set(feedisplay_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(feedisplay.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(feedisplay.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			if (if_block) if_block.d();
			destroy_component(feedisplay);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function init(el) {
	el.focus();
}

function instance$2($$self, $$props, $$invalidate) {
	let low;
	let medium;
	let high;
	let $sbtcConfig;
	validate_store(sbtcConfig, 'sbtcConfig');
	component_subscribe($$self, sbtcConfig, $$value => $$invalidate(12, $sbtcConfig = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('PegOutAmount', slots, []);
	let { amtData } = $$props;
	const dispatch = createEventDispatcher();
	let reason;
	let pegAmount = amtData.pegAmount;

	const changePegIn = maxValue => {
		reason = undefined;

		try {
			if (pegAmount > $sbtcConfig.balance.balance) {
				reason = 'Can\'t unwrap more sBTC then you own';

				dispatch('amount_updated', {
					opCode: 'user',
					error: true,
					reason: 'Can\'t unwrap more sBTC then you own'
				});

				return;
			}

			if (maxValue) {
				$$invalidate(1, pegAmount = $sbtcConfig.balance.balance);
			}

			const rate = amtData.fees.find(o => o === amtData.fee);

			dispatch('amount_updated', {
				opCode: 'user',
				error: false,
				newAmount: pegAmount,
				newFeeRate: rate
			});
		} catch(err) {
			reason = err || 'Amount is not valid';
		}
	};

	const changeRate = event => {
		const rate = event.detail.newFeeRate;

		dispatch('amount_updated', {
			opCode: 'prio',
			error: false,
			newAmount: pegAmount,
			newFeeRate: rate
		});
	};

	$$self.$$.on_mount.push(function () {
		if (amtData === undefined && !('amtData' in $$props || $$self.$$.bound[$$self.$$.props['amtData']])) {
			console.warn("<PegOutAmount> was created without expected prop 'amtData'");
		}
	});

	const writable_props = ['amtData'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PegOutAmount> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		pegAmount = to_number(this.value);
		$$invalidate(1, pegAmount);
	}

	const input_handler = () => changePegIn(false);
	const click_handler = () => changePegIn(true);

	function input1_input_handler() {
		amtData.dust = to_number(this.value);
		$$invalidate(0, amtData);
	}

	$$self.$$set = $$props => {
		if ('amtData' in $$props) $$invalidate(0, amtData = $$props.amtData);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		sbtcConfig,
		FeeDisplay,
		amtData,
		dispatch,
		reason,
		pegAmount,
		changePegIn,
		changeRate,
		init,
		high,
		medium,
		low,
		$sbtcConfig
	});

	$$self.$inject_state = $$props => {
		if ('amtData' in $$props) $$invalidate(0, amtData = $$props.amtData);
		if ('reason' in $$props) reason = $$props.reason;
		if ('pegAmount' in $$props) $$invalidate(1, pegAmount = $$props.pegAmount);
		if ('high' in $$props) high = $$props.high;
		if ('medium' in $$props) medium = $$props.medium;
		if ('low' in $$props) low = $$props.low;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*amtData*/ 1) {
			low = amtData.fee === amtData.fees[0];
		}

		if ($$self.$$.dirty & /*amtData*/ 1) {
			medium = amtData.fee === amtData.fees[1];
		}

		if ($$self.$$.dirty & /*amtData*/ 1) {
			high = amtData.fee === amtData.fees[2];
		}
	};

	return [
		amtData,
		pegAmount,
		changePegIn,
		changeRate,
		input0_input_handler,
		input_handler,
		click_handler,
		input1_input_handler
	];
}

class PegOutAmount extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, { amtData: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PegOutAmount",
			options,
			id: create_fragment$2.name
		});
	}

	get amtData() {
		throw new Error("<PegOutAmount>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set amtData(value) {
		throw new Error("<PegOutAmount>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const priv = utils.randomPrivateKey();
const keySetForFeeCalculation = [];
keySetForFeeCalculation.push({
  priv,
  ecdsaPub: getPublicKey(priv, true),
  schnorrPub: schnorr.getPublicKey(priv)
});
const _PegOutTransaction = class extends PegTransaction {
  constructor() {
    super();
    this.privKey = hex.decode("0101010101010101010101010101010101010101010101010101010101010101");
    this.getChange = () => {
      return this.maxCommit() - this.fee - this.dust;
    };
    this.setAmount = (amount) => {
      this.pegInData.amount = amount;
    };
    this.calculateFees = () => {
      if (!this.ready)
        throw new Error("Not ready!");
      const stacksAddress = "ST3N4AJFZZYC4BK99H53XP8KDGXFGQ2PRSPNET8TN";
      const sbtcWalletAddress = "tb1qasu5x7dllnejmx0dtd5j42quk4q03dl56caqss";
      const p2Ret = p2wpkh(keySetForFeeCalculation[0].ecdsaPub);
      assert("wpkh" === p2Ret.type);
      const tx = new Transaction({ allowUnknowOutput: true });
      for (const utxo of this.addressInfo.utxos) {
        tx.addInput({
          txid: hex.decode(utxo.txid),
          //txid: utxo.txid,
          index: utxo.vout,
          witnessUtxo: {
            amount: 600n,
            script: p2wpkh(secp256k1.getPublicKey(this.privKey, true)).script
          }
        });
      }
      tx.addOutput({ script: Script.encode(["RETURN", Buffer.from(stacksAddress, "utf8")]), amount: 0n });
      tx.addOutputAddress(sbtcWalletAddress, BigInt(0), this.net);
      tx.addOutputAddress(this.fromBtcAddress, BigInt(0), this.net);
      tx.sign(this.privKey);
      tx.finalize();
      this.scureFee = Number(tx.fee);
      this.fees = [
        this.scureFee * 0.8,
        //Math.floor((this.feeInfo.low_fee_per_kb / 1000) * vsize),
        this.scureFee * 1,
        //Math.floor((this.feeInfo.medium_fee_per_kb / 1000) * vsize),
        this.scureFee * 1.2
        //Math.floor((this.feeInfo.high_fee_per_kb / 1000) * vsize),
      ];
      this.fee = this.fees[1];
      if (this.pegInData.amount === 0) {
        this.pegInData.amount = this.maxCommit() - this.fee;
      }
    };
    this.getOutputsForDisplay = () => {
      const changeAmount = Math.floor(this.maxCommit() - this.dust - this.fee);
      const addr = this.pegInData.stacksAddress || "stx address unknown";
      const outs = [
        { script: "RETURN " + Buffer.from(addr), amount: 0 },
        { address: this.pegInData.sbtcWalletAddress, amount: this.dust }
      ];
      if (changeAmount > 0)
        outs.push({ address: this.fromBtcAddress, amount: changeAmount });
      outs.push({ address: "pays " + this.fee + " satoshis to miner." });
      return outs;
    };
    this.getDataToSign = () => {
      const amtBuf = Buffer.alloc(9);
      amtBuf.writeUInt32LE(this.pegInData.amount, 0);
      const script = OutScript.encode(Address(this.net).decode(this.pegInData.sbtcWalletAddress));
      const scriptBuf = Buffer.from(script);
      const data = Buffer.concat([amtBuf, scriptBuf]);
      console.log(data.toString("hex"));
      return data;
    };
    this.buildTransaction = (signature) => {
      if (!this.ready)
        throw new Error("Not ready!");
      if (!signature)
        throw new Error("Signature of output 2 scriptPubKey is required");
      return { opReturn: this.buildOpReturn(signature), opDrop: this.buildOpDrop(signature) };
    };
    this.buildOpReturn = (signature) => {
      if (!this.ready)
        throw new Error("Not ready!");
      if (!signature)
        throw new Error("Signature of output 2 scriptPubKey is required");
      const tx = new Transaction({ allowUnknowOutput: true });
      for (const utxo of this.addressInfo.utxos) {
        tx.addInput({
          txid: hex.decode(utxo.txid),
          index: utxo.vout
        });
      }
      const buf1 = Buffer.allocUnsafe(9);
      buf1.writeUInt32LE(this.pegInData.amount, 0);
      if (!signature)
        throw new Error("Signature of the amount and output 2 scriptPubKey is missing.");
      const buf2 = Buffer.from(signature);
      const data = Buffer.concat([buf1, buf2]);
      tx.addOutput({ script: Script.encode(["RETURN", data]), amount: 0n });
      tx.addOutputAddress(this.pegInData.sbtcWalletAddress, BigInt(this.dust), this.net);
      tx.addOutputAddress(this.fromBtcAddress, BigInt(this.getChange()), this.net);
      return tx;
    };
    this.buildOpDrop = (signature) => {
      if (!signature)
        throw new Error("Signature of the amount and output 2 scriptPubKey is missing.");
      const tx = new Transaction({ allowUnknowOutput: true });
      for (const utxo of this.addressInfo.utxos) {
        tx.addInput({
          txid: hex.decode(utxo.txid),
          index: utxo.vout
        });
      }
      const asmScript = this.getOpDropP2shScript(signature);
      tx.addOutput({ script: asmScript, amount: BigInt(this.dust) });
      tx.addOutputAddress(this.fromBtcAddress, BigInt(this.getChange()), this.net);
      return tx;
    };
  }
  getOpDropP2shScript(signature) {
    const buf1 = Buffer.allocUnsafe(9);
    buf1.writeUInt32LE(this.pegInData.amount, 0);
    const buf2 = Buffer.from(signature);
    const data = Buffer.concat([buf1, buf2]);
    const script = OutScript.encode(Address(this.net).decode(this.pegInData.sbtcWalletAddress));
    const asmScript = Script.encode([data, "DROP", "DUP", "HASH160", script, "EQUALVERIFY", "CHECKSIG"]);
    console.log("getOpDropP2shScript:asmScript: ", Script.decode(asmScript));
    return asmScript;
  }
};
let PegOutTransaction = _PegOutTransaction;
PegOutTransaction.create = async (network, fromBtcAddress, sbtcWalletAddress) => {
  const me = new _PegOutTransaction();
  me.net = network === "testnet" ? TEST_NETWORK : NETWORK;
  me.fromBtcAddress = fromBtcAddress;
  me.pegInData = {
    amount: 0,
    stacksAddress: void 0,
    sbtcWalletAddress
  };
  me.addressInfo = await fetchUtxoSet(fromBtcAddress);
  const btcFeeRates = await fetchCurrentFeeRates();
  me.feeInfo = btcFeeRates.feeInfo;
  me.ready = true;
  return me;
};
PegOutTransaction.hydrate = (o) => {
  const me = new _PegOutTransaction();
  me.net = o.net;
  if (!o.fromBtcAddress)
    throw new Error("No address - use create instead!");
  me.fromBtcAddress = o.fromBtcAddress;
  me.pegInData = o.pegInData;
  me.addressInfo = o.addressInfo;
  me.feeInfo = o.feeInfo;
  me.fees = o.fees;
  me.fee = o.fee;
  me.scureFee = o.scureFee;
  me.ready = o.ready;
  return me;
};

Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
function utf8ToBytes(str) {
    return new TextEncoder().encode(str);
}
function concatBytes(...arrays) {
    if (!arrays.every(a => a instanceof Uint8Array))
        throw new Error('Uint8Array list expected');
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}

function writeUInt8(destination, value, offset) {
    destination[offset] = value;
}
function writeUInt16LE(destination, value, offset) {
    destination[offset + 0] = value & 255;
    value >>>= 8;
    destination[offset + 1] = value & 255;
}
function writeUInt32LE(destination, value, offset) {
    destination[offset + 0] = value & 255;
    value >>>= 8;
    destination[offset + 1] = value & 255;
    value >>>= 8;
    destination[offset + 2] = value & 255;
    value >>>= 8;
    destination[offset + 3] = value & 255;
}

const MAX_SAFE_INTEGER = 9007199254740991;
function ensureUInt53(n) {
    if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
        throw new RangeError('value out of range');
}
function encode(number, bytes, offset = 0) {
    ensureUInt53(number);
    if (!bytes)
        bytes = new Uint8Array(encodingLength(number));
    if (number < 0xfd) {
        writeUInt8(bytes, number, offset);
    }
    else if (number <= 65535) {
        writeUInt8(bytes, 0xfd, offset);
        writeUInt16LE(bytes, number, offset + 1);
    }
    else if (number <= 4294967295) {
        writeUInt8(bytes, 0xfe, offset);
        writeUInt32LE(bytes, number, offset + 1);
    }
    else {
        writeUInt8(bytes, 0xff, offset);
        writeUInt32LE(bytes, number >>> 0, offset + 1);
        writeUInt32LE(bytes, (number / 4294967296) | 0, offset + 5);
    }
    return bytes;
}
function encodingLength(number) {
    ensureUInt53(number);
    return number < 0xfd ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;
}

const chainPrefix = '\x17Stacks Signed Message:\n';
function hashMessage(message, prefix = chainPrefix) {
    return sha256(encodeMessage(message, prefix));
}
function encodeMessage(message, prefix = chainPrefix) {
    const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;
    const encodedLength = encode(messageBytes.length);
    return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);
}

pe({
  name: S("SBTC Bridge"),
  version: S("1.0.0"),
  "chain-id": K(1 /* Mainnet */  /* Testnet */)
});
function verifyDataSignature(message, publicKey, signature) {
  return Ze({
    message: typeof message === "string" ? message : message.toString("hex"),
    signature,
    publicKey
  });
}
function getStacksAddressFromSignature(message, signature) {
  const sig = Z({ signature, mode: "rsv" });
  const s1 = new Signature(sig.signature.r, sig.signature.s);
  const msgHash = hashMessage(message);
  let pubkey = recoverPublicKey(msgHash, s1, 1, true);
  pubkey = p(pubkey);
  const addresses = {
    tp2pkh: qe(pubkey, X.testnetP2PKH),
    tp2sh: qe(pubkey, X.testnetP2SH),
    mp2pkh: qe(pubkey, X.mainnetP2PKH),
    mp2sh: qe(pubkey, X.mainnetP2SH)
  };
  return addresses;
}

const BuildTransaction_svelte_svelte_type_style_lang = '';

/* src/lib/components/unwrapper/BuildTransaction.svelte generated by Svelte v3.57.0 */

const { Error: Error_1, console: console_1 } = globals;
const file$1 = "src/lib/components/unwrapper/BuildTransaction.svelte";

// (162:0) {:else}
function create_else_block_1(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let p1;
	let span1;
	let t2;
	let span0;
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Problem Connecting to APIs");
			t1 = space();
			p1 = element("p");
			span1 = element("span");
			t2 = text("Status: Bridge API currently experiencing connectivity problems.\n    We are already working on this.\n  ");
			span0 = element("span");
			t3 = text("Please report this to the core engineering team!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Problem Connecting to APIs");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			span1 = claim_element(p1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, "Status: Bridge API currently experiencing connectivity problems.\n    We are already working on this.\n  ");
			span0 = claim_element(span1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, "Please report this to the core engineering team!");
			span0_nodes.forEach(detach_dev);
			span1_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "text-white");
			add_location(p0, file$1, 163, 2, 5824);
			attr_dev(span0, "class", "mt-5 text-warning");
			add_location(span0, file$1, 166, 2, 6008);
			attr_dev(span1, "class", "nav-item");
			add_location(span1, file$1, 164, 5, 5882);
			add_location(p1, file$1, 164, 2, 5879);
			attr_dev(div, "class", "lobby bg-dark");
			add_location(div, file$1, 162, 0, 5794);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, p0);
			append_hydration_dev(p0, t0);
			append_hydration_dev(div, t1);
			append_hydration_dev(div, p1);
			append_hydration_dev(p1, span1);
			append_hydration_dev(span1, t2);
			append_hydration_dev(span1, span0);
			append_hydration_dev(span0, t3);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(162:0) {:else}",
		ctx
	});

	return block;
}

// (139:0) {#if ready}
function create_if_block$1(ctx) {
	let div;
	let utxoselection;
	let t0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let if_block1_anchor;
	let current;

	utxoselection = new UTXOSelection({
			props: { utxoData: /*utxoData*/ ctx[5] },
			$$inline: true
		});

	utxoselection.$on("utxo_updated", /*utxoUpdated*/ ctx[14]);
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$sbtcConfig*/ ctx[1].balance.balance <= 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*errorReason*/ ctx[0] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(utxoselection.$$.fragment);
			t0 = space();
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(utxoselection.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mb-4");
			add_location(div, file$1, 139, 2, 4874);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(utxoselection, div, null);
			insert_hydration_dev(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const utxoselection_changes = {};
			if (dirty & /*utxoData*/ 32) utxoselection_changes.utxoData = /*utxoData*/ ctx[5];
			utxoselection.$set(utxoselection_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(t1.parentNode, t1);
			}

			if (/*errorReason*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(utxoselection.$$.fragment, local);
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(utxoselection.$$.fragment, local);
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(utxoselection);
			if (detaching) detach_dev(t0);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(139:0) {#if ready}",
		ctx
	});

	return block;
}

// (146:2) {:else}
function create_else_block(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*showStxAddress*/ ctx[4] && create_if_block_5(ctx);
	let if_block1 = /*showAmount*/ ctx[3] && create_if_block_4(ctx);
	let if_block2 = /*showButton*/ ctx[2] && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration_dev(target, if_block2_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*showStxAddress*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*showStxAddress*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*showAmount*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*showAmount*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*showButton*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(146:2) {:else}",
		ctx
	});

	return block;
}

// (141:2) {#if $sbtcConfig.balance.balance <= 0}
function create_if_block_2(ctx) {
	let div;
	let p0;
	let t0;
	let a0;
	let t1_value = /*$sbtcConfig*/ ctx[1].balance.address + "";
	let t1;
	let a0_href_value;
	let t2;
	let p1;
	let a1;
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("No SBTC to unwrap for account: ");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			a1 = element("a");
			t3 = text("Get sBTC here!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "No SBTC to unwrap for account: ");
			a0 = claim_element(p0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, t1_value);
			a0_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			a1 = claim_element(p1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Get sBTC here!");
			a1_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", a0_href_value = explorerAddressUrl(/*$sbtcConfig*/ ctx[1].balance.address));
			add_location(a0, file$1, 142, 51, 5095);
			attr_dev(p0, "class", "mb-4");
			add_location(p0, file$1, 142, 4, 5048);
			attr_dev(a1, "href", "" + (base + "/wrap"));
			add_location(a1, file$1, 143, 7, 5198);
			add_location(p1, file$1, 143, 4, 5195);
			attr_dev(div, "class", "text-center text-warning my-5");
			add_location(div, file$1, 141, 2, 5000);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, p0);
			append_hydration_dev(p0, t0);
			append_hydration_dev(p0, a0);
			append_hydration_dev(a0, t1);
			append_hydration_dev(div, t2);
			append_hydration_dev(div, p1);
			append_hydration_dev(p1, a1);
			append_hydration_dev(a1, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$sbtcConfig*/ 2 && t1_value !== (t1_value = /*$sbtcConfig*/ ctx[1].balance.address + "")) set_data_dev(t1, t1_value);

			if (dirty & /*$sbtcConfig*/ 2 && a0_href_value !== (a0_href_value = explorerAddressUrl(/*$sbtcConfig*/ ctx[1].balance.address))) {
				attr_dev(a0, "href", a0_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(141:2) {#if $sbtcConfig.balance.balance <= 0}",
		ctx
	});

	return block;
}

// (147:2) {#if showStxAddress}
function create_if_block_5(ctx) {
	let div;
	let principal;
	let current;

	principal = new Principal({
			props: { principalData: /*principalData*/ ctx[8] },
			$$inline: true
		});

	principal.$on("principal_updated", /*principalUpdated*/ ctx[13]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(principal.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(principal.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mb-4");
			add_location(div, file$1, 147, 2, 5287);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(principal, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(principal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(principal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(principal);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(147:2) {#if showStxAddress}",
		ctx
	});

	return block;
}

// (150:2) {#if showAmount}
function create_if_block_4(ctx) {
	let div;
	let pegoutamount;
	let current;

	pegoutamount = new PegOutAmount({
			props: { amtData: /*amtData*/ ctx[6] },
			$$inline: true
		});

	pegoutamount.$on("amount_updated", /*amountUpdated*/ ctx[12]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(pegoutamount.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(pegoutamount.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mb-4");
			add_location(div, file$1, 150, 2, 5410);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(pegoutamount, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const pegoutamount_changes = {};
			if (dirty & /*amtData*/ 64) pegoutamount_changes.amtData = /*amtData*/ ctx[6];
			pegoutamount.$set(pegoutamount_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pegoutamount.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pegoutamount.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(pegoutamount);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(150:2) {#if showAmount}",
		ctx
	});

	return block;
}

// (153:2) {#if showButton}
function create_if_block_3(ctx) {
	let div1;
	let div0;
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			button = element("button");
			t = text("CONTINUE");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			button = claim_element(div0_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "CONTINUE");
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "btn btn-outline-info w-100");
			attr_dev(button, "type", "button");
			add_location(button, file$1, 155, 6, 5570);
			attr_dev(div0, "class", "col");
			add_location(div0, file$1, 154, 4, 5546);
			attr_dev(div1, "class", "row s-DXQTMplg7quh");
			add_location(div1, file$1, 153, 2, 5524);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, button);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[18], false, false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(153:2) {#if showButton}",
		ctx
	});

	return block;
}

// (161:2) {#if errorReason}
function create_if_block_1$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*errorReason*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*errorReason*/ ctx[0]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "text-danger");
			add_location(div, file$1, 160, 19, 5736);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errorReason*/ 1) set_data_dev(t, /*errorReason*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(161:2) {#if errorReason}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*ready*/ ctx[9]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if_block.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let amtData;
	let utxoData;
	let showStxAddress;
	let showAmount;
	let showButton;
	let $sbtcConfig;
	let $signMessage;
	let $account;
	validate_store(sbtcConfig, 'sbtcConfig');
	component_subscribe($$self, sbtcConfig, $$value => $$invalidate(1, $sbtcConfig = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BuildTransaction', slots, []);
	let { poTx } = $$props;
	const account = a();
	validate_store(account, 'account');
	component_subscribe($$self, account, value => $$invalidate(22, $account = value));
	const auth = Ce();
	if (!poTx.pegInData.stacksAddress && $account.stxAddress) poTx.pegInData.stacksAddress = $account.stxAddress;

	const principalData = {
		label: 'Stacks Contract or Account Address',
		info: 'sBTC will be burned from this account',
		currentAddress: poTx.pegInData.stacksAddress
	};

	const network = "mainnet";
	const dispatch = createEventDispatcher();
	let ready = true;
	let errorReason;
	let stxAddressOk = true;
	let amountOk = true;

	const updateConfig = () => {
		const conf = $sbtcConfig;
		conf.pegOutTransaction = poTx;
		sbtcConfig.update(() => conf);
		$$invalidate(17, amountOk = poTx.pegInData.amount > 0);
	};

	let sigError;
	let sigData;
	const signMessage = ye();
	validate_store(signMessage, 'signMessage');
	component_subscribe($$self, signMessage, value => $$invalidate(21, $signMessage = value));

	const onSignMessage = async message => {
		return await $signMessage.openSignMessage({
			message,
			onFinish: value => {
				sigData = value;
				return value;
			},
			onCancel: error => {
				sigError = error;
			}
		});
	};

	const requestSignature = async () => {
		const script = poTx.getDataToSign();
		sigData = await onSignMessage(script.toString('hex'));

		//const msg = { script: script.toString('hex') }
		//const sigData:any = await requestSignMessage(msg);
		if (sigError) {
			return;
		}

		if (!sigData || !sigData.publicKey || !verifyDataSignature(script, sigData.publicKey, sigData.signature)) {
			throw new Error('Unable to validate signature.');
		} else {
			console.log('tx-data:data : ' + script.toString('hex'));
			console.log('tx-data:publicKey : ' + sigData.publicKey);
			console.log('tx-data:amount : ' + poTx.pegInData.amount);
			console.log('tx-data:sbtcWalletAddress : ' + poTx.pegInData.sbtcWalletAddress);
			console.log('tx-data:signature : ' + sigData.signature);
		}

		const addreObj = getStacksAddressFromSignature(script.toString('hex'), sigData.signature);
		console.log(addreObj);
		const conf = $sbtcConfig;
		conf.sigData = sigData;
		sbtcConfig.update(() => conf);
		dispatch('request_signature');
	};

	const amountUpdated = event => {
		$$invalidate(17, amountOk = !event.detail.error);

		if (amountOk) {
			poTx.setFeeRate(event.detail.newFeeRate);
			poTx.setAmount(event.detail.newAmount);
			updateConfig();
		} else {
			$$invalidate(0, errorReason = event.detail.reason);
		}
	};

	const principalUpdated = event => {
		$$invalidate(16, stxAddressOk = !event.detail.error);

		if (stxAddressOk) {
			poTx.setStacksAddress(event.detail.currentAddress);
			updateConfig();
		}
	};

	const utxoUpdated = async event => {
		$$invalidate(0, errorReason = undefined);
		const data = event.detail;

		if (data.opCode === 'address-change') {
			try {
				$$invalidate(15, poTx = await PegOutTransaction.create(network, data.bitcoinAddress, $sbtcConfig.sbtcContractData.sbtcWalletAddress));
				poTx.calculateFees();
				updateConfig();
			} catch(err) {
				$$invalidate(0, errorReason = err.message);
			}
		}
	};

	onMount(async () => {
		if (!poTx.pegInData.stacksAddress) $$invalidate(16, stxAddressOk = false);
		if (poTx.pegInData.amount > 0) $$invalidate(17, amountOk = true);
		if (poTx.ready) poTx.calculateFees();
		updateConfig();
	});

	$$self.$$.on_mount.push(function () {
		if (poTx === undefined && !('poTx' in $$props || $$self.$$.bound[$$self.$$.props['poTx']])) {
			console_1.warn("<BuildTransaction> was created without expected prop 'poTx'");
		}
	});

	const writable_props = ['poTx'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<BuildTransaction> was created with unknown prop '${key}'`);
	});

	const click_handler = () => requestSignature();

	$$self.$$set = $$props => {
		if ('poTx' in $$props) $$invalidate(15, poTx = $$props.poTx);
	};

	$$self.$capture_state = () => ({
		onMount,
		sbtcConfig,
		Principal,
		PegOutAmount,
		UTXOSelection,
		createEventDispatcher,
		PegOutTransaction,
		base,
		explorerAddressUrl,
		verifyDataSignature,
		getStacksAddressFromSignature,
		getOpenSignMessage: ye,
		getAuth: Ce,
		getAccount: a,
		sha256,
		poTx,
		account,
		auth,
		principalData,
		network,
		dispatch,
		ready,
		errorReason,
		stxAddressOk,
		amountOk,
		updateConfig,
		sigError,
		sigData,
		signMessage,
		onSignMessage,
		requestSignature,
		amountUpdated,
		principalUpdated,
		utxoUpdated,
		showButton,
		showAmount,
		showStxAddress,
		utxoData,
		amtData,
		$sbtcConfig,
		$signMessage,
		$account
	});

	$$self.$inject_state = $$props => {
		if ('poTx' in $$props) $$invalidate(15, poTx = $$props.poTx);
		if ('ready' in $$props) $$invalidate(9, ready = $$props.ready);
		if ('errorReason' in $$props) $$invalidate(0, errorReason = $$props.errorReason);
		if ('stxAddressOk' in $$props) $$invalidate(16, stxAddressOk = $$props.stxAddressOk);
		if ('amountOk' in $$props) $$invalidate(17, amountOk = $$props.amountOk);
		if ('sigError' in $$props) sigError = $$props.sigError;
		if ('sigData' in $$props) sigData = $$props.sigData;
		if ('showButton' in $$props) $$invalidate(2, showButton = $$props.showButton);
		if ('showAmount' in $$props) $$invalidate(3, showAmount = $$props.showAmount);
		if ('showStxAddress' in $$props) $$invalidate(4, showStxAddress = $$props.showStxAddress);
		if ('utxoData' in $$props) $$invalidate(5, utxoData = $$props.utxoData);
		if ('amtData' in $$props) $$invalidate(6, amtData = $$props.amtData);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*poTx, $sbtcConfig*/ 32770) {
			$$invalidate(6, amtData = {
				pegIn: false,
				label: 'Amount (SBTC)',
				info: 'The amount to unwrap cannot exceed your sBTC balance',
				pegAmount: poTx.pegInData.amount > 0
				? poTx.pegInData.amount
				: $sbtcConfig.balance.balance,
				maxCommit: poTx.maxCommit(),
				change: poTx.getChange(),
				fee: poTx.fee,
				fees: poTx.fees,
				dust: poTx.dust
			});
		}

		if ($$self.$$.dirty & /*poTx*/ 32768) {
			$$invalidate(5, utxoData = {
				label: 'Bitcoin Address',
				info: 'Your sBTC will be burned and the equivalent bitcoin then sent to this address',
				maxCommit: poTx.ready ? poTx.maxCommit() : 0,
				fromBtcAddress: poTx.ready ? poTx.fromBtcAddress : undefined,
				numbInputs: poTx.ready ? poTx.addressInfo.utxos.length : 0,
				network
			});
		}

		if ($$self.$$.dirty & /*poTx, errorReason*/ 32769) {
			$$invalidate(4, showStxAddress = poTx.ready && !errorReason);
		}

		if ($$self.$$.dirty & /*poTx, stxAddressOk, errorReason*/ 98305) {
			$$invalidate(3, showAmount = poTx.ready && stxAddressOk && !errorReason);
		}

		if ($$self.$$.dirty & /*poTx, amountOk, errorReason*/ 163841) {
			$$invalidate(2, showButton = poTx.ready && amountOk && !errorReason);
		}
	};

	return [
		errorReason,
		$sbtcConfig,
		showButton,
		showAmount,
		showStxAddress,
		utxoData,
		amtData,
		account,
		principalData,
		ready,
		signMessage,
		requestSignature,
		amountUpdated,
		principalUpdated,
		utxoUpdated,
		poTx,
		stxAddressOk,
		amountOk,
		click_handler
	];
}

class BuildTransaction extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, { poTx: 15 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BuildTransaction",
			options,
			id: create_fragment$1.name
		});
	}

	get poTx() {
		throw new Error_1("<BuildTransaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set poTx(value) {
		throw new Error_1("<BuildTransaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const _page_svelte_svelte_type_style_lang = '';

/* src/routes/unwrap/+page.svelte generated by Svelte v3.57.0 */
const file = "src/routes/unwrap/+page.svelte";

// (39:7) {#if sigData}
function create_if_block_1(ctx) {
	let signtransaction;
	let current;

	signtransaction = new SignTransaction({
			props: { sigData: /*sigData*/ ctx[1] },
			$$inline: true
		});

	signtransaction.$on("update_transaction", /*openBuildView*/ ctx[4]);

	const block = {
		c: function create() {
			create_component(signtransaction.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(signtransaction.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(signtransaction, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const signtransaction_changes = {};
			if (dirty & /*sigData*/ 2) signtransaction_changes.sigData = /*sigData*/ ctx[1];
			signtransaction.$set(signtransaction_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(signtransaction.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(signtransaction.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(signtransaction, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(39:7) {#if sigData}",
		ctx
	});

	return block;
}

// (36:7) {#if view === 'build_tx_view'}
function create_if_block(ctx) {
	let buildtransaction;
	let current;

	buildtransaction = new BuildTransaction({
			props: { poTx: /*poTx*/ ctx[0] },
			$$inline: true
		});

	buildtransaction.$on("request_signature", /*openSigView*/ ctx[3]);

	const block = {
		c: function create() {
			create_component(buildtransaction.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(buildtransaction.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(buildtransaction, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const buildtransaction_changes = {};
			if (dirty & /*poTx*/ 1) buildtransaction_changes.poTx = /*poTx*/ ctx[0];
			buildtransaction.$set(buildtransaction_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(buildtransaction.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(buildtransaction.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(buildtransaction, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(36:7) {#if view === 'build_tx_view'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let div5;
	let div4;
	let h1;
	let t0;
	let span;
	let t1;
	let t2;
	let h2;
	let t3;
	let t4;
	let div0;
	let sbtcwalletdisplay;
	let t5;
	let div3;
	let div2;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	sbtcwalletdisplay = new SbtcWalletDisplay({ $$inline: true });
	const if_block_creators = [create_if_block, create_if_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*view*/ ctx[2] === 'build_tx_view') return 0;
		if (/*sigData*/ ctx[1]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			section = element("section");
			div5 = element("div");
			div4 = element("div");
			h1 = element("h1");
			t0 = text("Unwrap ");
			span = element("span");
			t1 = text("sBTC");
			t2 = space();
			h2 = element("h2");
			t3 = text("sBTC to BTC");
			t4 = space();
			div0 = element("div");
			create_component(sbtcwalletdisplay.$$.fragment);
			t5 = space();
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div5 = claim_element(section_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h1 = claim_element(div4_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Unwrap ");
			span = claim_element(h1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "sBTC");
			span_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div4_nodes);
			h2 = claim_element(div4_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "sBTC to BTC");
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(div4_nodes);
			div0 = claim_element(div4_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(sbtcwalletdisplay.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "strokeme-warning");
			add_location(span, file, 27, 35, 1129);
			attr_dev(h1, "class", "text-warning s-sCjUEJHBVR8B");
			add_location(h1, file, 27, 3, 1097);
			attr_dev(h2, "class", "text-warning mb-3");
			add_location(h2, file, 28, 3, 1180);
			attr_dev(div0, "class", "my-3 d-flex justify-content-between text-white");
			add_location(div0, file, 29, 3, 1230);
			add_location(div1, file, 34, 5, 1413);
			attr_dev(div2, "class", "card border p-4");
			add_location(div2, file, 33, 4, 1378);
			attr_dev(div3, "class", "d-flex justify-content-center");
			add_location(div3, file, 32, 3, 1330);
			attr_dev(div4, "class", "card-width");
			add_location(div4, file, 26, 2, 1069);
			attr_dev(div5, "class", "my-4 p-4");
			add_location(div5, file, 25, 1, 1044);
			attr_dev(section, "class", "bg-dark s-sCjUEJHBVR8B");
			add_location(section, file, 24, 0, 1017);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, div5);
			append_hydration_dev(div5, div4);
			append_hydration_dev(div4, h1);
			append_hydration_dev(h1, t0);
			append_hydration_dev(h1, span);
			append_hydration_dev(span, t1);
			append_hydration_dev(div4, t2);
			append_hydration_dev(div4, h2);
			append_hydration_dev(h2, t3);
			append_hydration_dev(div4, t4);
			append_hydration_dev(div4, div0);
			mount_component(sbtcwalletdisplay, div0, null);
			append_hydration_dev(div4, t5);
			append_hydration_dev(div4, div3);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div1, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sbtcwalletdisplay.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(sbtcwalletdisplay.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(sbtcwalletdisplay);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let view;
	let $sbtcConfig;
	validate_store(sbtcConfig, 'sbtcConfig');
	component_subscribe($$self, sbtcConfig, $$value => $$invalidate(5, $sbtcConfig = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Page', slots, []);

	let poTx = $sbtcConfig.pegOutTransaction && $sbtcConfig.pegOutTransaction.ready
	? PegOutTransaction.hydrate($sbtcConfig.pegOutTransaction)
	: new PegOutTransaction();

	let sigData;

	const openSigView = () => {
		$$invalidate(0, poTx = PegOutTransaction.hydrate($sbtcConfig.pegOutTransaction));
		const signature = $sbtcConfig.sigData.signature;
		const txs = poTx.buildTransaction(signature);

		$$invalidate(1, sigData = {
			txs,
			outputsForDisplay: poTx.getOutputsForDisplay(),
			inputsForDisplay: poTx.addressInfo.utxos
		});

		$$invalidate(2, view = 'sign_tx_view');
	};

	const openBuildView = () => {
		$$invalidate(2, view = 'build_tx_view');
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Page> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		BuildTransaction,
		SignTransaction,
		SbtcWalletDisplay,
		sbtcConfig,
		PegOutTransaction,
		poTx,
		sigData,
		openSigView,
		openBuildView,
		view,
		$sbtcConfig
	});

	$$self.$inject_state = $$props => {
		if ('poTx' in $$props) $$invalidate(0, poTx = $$props.poTx);
		if ('sigData' in $$props) $$invalidate(1, sigData = $$props.sigData);
		if ('view' in $$props) $$invalidate(2, view = $$props.view);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$invalidate(2, view = 'build_tx_view');
	return [poTx, sigData, view, openSigView, openBuildView];
}

class Page extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init$1(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Page",
			options,
			id: create_fragment.name
		});
	}
}

export { Page as default };
