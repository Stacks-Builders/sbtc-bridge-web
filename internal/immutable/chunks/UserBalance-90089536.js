import { S as SvelteComponent, i as init, s as safe_not_equal, e as empty, b as insert_hydration, C as noop, h as detach, D as component_subscribe, o as onMount, k as element, l as claim_element, m as children, n as attr, a4 as destroy_each, a as space, q as text, c as claim_space, r as claim_text, E as append_hydration } from './index-963bdb90.js';
import { s as sbtcConfig, a, j as fetchUserBalance } from './stores-dd03c1bb.js';

const btcPrecision = 1e8;
function fmtSatoshiToBitcoin(amountSats) {
  return Math.round(amountSats) / btcPrecision;
}
function hexToAscii(input) {
  const buf = Buffer.from(input, "hex");
  return buf.toString("ascii");
}
function truncate(stringy) {
  return stringy.substring(0, 6) + ".." + stringy.substring(stringy.length - 8);
}

/* src/lib/components/UserBalance.svelte generated by Svelte v3.55.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (35:0) {#if inited}
function create_if_block(ctx) {
	let div;
	let each_value = /*balanceObjs*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "row my-4");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*fmtSatoshiToBitcoin, balanceObjs, showAddress*/ 9) {
				each_value = /*balanceObjs*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (39:4) {#if showAddress}
function create_if_block_1(ctx) {
	let t_value = /*bal*/ ctx[6].address + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (37:2) {#each balanceObjs as bal}
function create_each_block(ctx) {
	let div0;
	let t0;
	let div1;
	let t1;
	let t2_value = fmtSatoshiToBitcoin(/*bal*/ ctx[6].balance) + "";
	let t2;
	let t3;
	let if_block = /*showAddress*/ ctx[0] && create_if_block_1(ctx);

	return {
		c() {
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			t1 = text("Bal. ");
			t2 = text(t2_value);
			t3 = text(" sBTC\n  ");
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block) if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Bal. ");
			t2 = claim_text(div1_nodes, t2_value);
			t3 = claim_text(div1_nodes, " sBTC\n  ");
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col-8");
			attr(div1, "class", "col-4 text-end");
		},
		m(target, anchor) {
			insert_hydration(target, div0, anchor);
			if (if_block) if_block.m(div0, null);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div1, anchor);
			append_hydration(div1, t1);
			append_hydration(div1, t2);
			append_hydration(div1, t3);
		},
		p(ctx, dirty) {
			if (/*showAddress*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (if_block) if_block.d();
			if (detaching) detach(t0);
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*inited*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*inited*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $sbtcConfig;
	let $account;
	component_subscribe($$self, sbtcConfig, $$value => $$invalidate(4, $sbtcConfig = $$value));
	let { showAddress = false } = $$props;
	const account = a();
	component_subscribe($$self, account, value => $$invalidate(5, $account = value));
	let balanceObjs = [];
	let inited = false;

	onMount(async () => {
		const stxAddressAuth = $account.stxAddress;
		const stxAddressForm = $sbtcConfig.stxAddress;

		if (stxAddressAuth) {
			const balance = await fetchUserBalance(stxAddressAuth);

			if (balance > 0) {
				balanceObjs.push({ address: stxAddressAuth, balance });
			}
		}

		if (stxAddressForm && stxAddressForm !== stxAddressAuth) {
			const balance = await fetchUserBalance(stxAddressForm);

			if (balance > 0) {
				balanceObjs.push({ address: stxAddressForm, balance });
			}
		}

		$$invalidate(1, inited = true);
	});

	$$self.$$set = $$props => {
		if ('showAddress' in $$props) $$invalidate(0, showAddress = $$props.showAddress);
	};

	return [showAddress, inited, account, balanceObjs];
}

class UserBalance extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { showAddress: 0 });
	}
}

export { UserBalance as U, hexToAscii as h, truncate as t };
