import { S as SvelteComponent, i as init, s as safe_not_equal, L as create_slot, V as assign, W as svg_element, X as claim_svg_element, m as children, h as detach, n as attr, Y as set_svg_attributes, Z as toggle_class, b as insert_hydration, E as append_hydration, M as update_slot_base, N as get_all_dirty_from_scope, O as get_slot_changes, _ as get_spread_update, f as transition_in, t as transition_out, $ as compute_rest_props, a0 as exclude_internal_props, k as element, q as text, a as space, w as create_component, l as claim_element, r as claim_text, c as claim_space, x as claim_component, y as mount_component, G as listen, H as prevent_default, z as destroy_component, I as run_all, o as onMount, e as empty, a4 as destroy_each, C as noop, u as set_data } from '../../../chunks/index-963bdb90.js';
import { r as readEvents } from '../../../chunks/stores-dd03c1bb.js';
import { h as hexToAscii, U as UserBalance, t as truncate } from '../../../chunks/UserBalance-90089536.js';
import { d as decodeStacksAddress } from '../../../chunks/stacks-acc5a44a.js';

/* node_modules/svelte-bootstrap-icons/lib/ArrowRepeat.svelte generated by Svelte v3.55.1 */

function create_fragment$2(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ width: "16" },
		{ height: "16" },
		{ fill: "currentColor" },
		{ viewBox: "0 0 16 16" },
		/*$$restProps*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (default_slot) default_slot.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				height: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			if (default_slot) default_slot.l(svg_nodes);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { "fill-rule": true, d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "d", "M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z");
			set_svg_attributes(svg, svg_data);
			toggle_class(svg, "bi", true);
			toggle_class(svg, "bi-arrow-repeat", true);
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);

			if (default_slot) {
				default_slot.m(svg, null);
			}

			append_hydration(svg, path0);
			append_hydration(svg, path1);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ width: "16" },
				{ height: "16" },
				{ fill: "currentColor" },
				{ viewBox: "0 0 16 16" },
				dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]
			]));

			toggle_class(svg, "bi", true);
			toggle_class(svg, "bi-arrow-repeat", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, $$scope, slots];
}

class ArrowRepeat extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$2, safe_not_equal, {});
	}
}

async function readTx(txid, replace) {
  const path = "https://mempool.space/api";
  const url = path + "/tx/" + txid;
  const response = await fetch(url);
  const val = await response.json();
  let error = "";
  try {
    return decodePegInOutputs(val.vout);
  } catch (err) {
    error = err.message;
  }
  throw new Error(error);
}
function decodePegInOutputs(outputs) {
  if (!outputs || outputs.length < 2)
    throw new Error("Incorrect number of outputs for a peg in.");
  const outZeroType = outputs[0].scriptpubkey_type.toLowerCase();
  if (outZeroType !== "op_return")
    throw new Error("OP_RETURN in output 0 was expected but not found.");
  const stxAddress = hexToAscii(outputs[0].scriptpubkey).substring(2);
  try {
    decodeStacksAddress(stxAddress);
    const amountSats = outputs[1] ? outputs[1].value : 0;
    const sbtcWallet = outputs[1].scriptpubkey_address;
    return {
      type: "pegin",
      stxAddress,
      amountSats,
      sbtcWallet
    };
  } catch (err) {
    return decodePegOutOutputs(outputs);
  }
}
function decodePegOutOutputs(outputs) {
  const pegOutValue = Number(hexToAscii(outputs[0].scriptpubkey).substring(2));
  outputs[1].value;
  const sbtcWallet = outputs[1].scriptpubkey_address;
  return {
    type: "pegout",
    stxAddress: "",
    amountSats: pegOutValue,
    sbtcWallet
  };
}

const SbtcContractTransactions_svelte_svelte_type_style_lang = '';

/* src/lib/components/history/SbtcContractTransactions.svelte generated by Svelte v3.55.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (59:2) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let each_value = /*events*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*truncate, events*/ 1) {
				each_value = /*events*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (57:2) {#if !transactions}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("No transactions");
		},
		l(nodes) {
			t = claim_text(nodes, "No transactions");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (60:2) {#each events as item}
function create_each_block(ctx) {
	let div5;
	let div0;
	let t0_value = /*item*/ ctx[13].txData.type + "";
	let t0;
	let t1;
	let div1;
	let t2_value = truncate(/*item*/ ctx[13].txData.stxAddress) + "";
	let t2;
	let t3;
	let div2;
	let t4_value = truncate(/*item*/ ctx[13].txData.sbtcWallet) + "";
	let t4;
	let t5;
	let div3;
	let t6_value = /*item*/ ctx[13].txData.amountSats + "";
	let t6;
	let t7;
	let div4;
	let t8_value = truncate(/*item*/ ctx[13].data.value) + "";
	let t8;
	let t9;

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			t4 = text(t4_value);
			t5 = space();
			div3 = element("div");
			t6 = text(t6_value);
			t7 = space();
			div4 = element("div");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach);
			t1 = claim_space(div5_nodes);
			div1 = claim_element(div5_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t2 = claim_text(div1_nodes, t2_value);
			div1_nodes.forEach(detach);
			t3 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t4 = claim_text(div2_nodes, t4_value);
			div2_nodes.forEach(detach);
			t5 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t6 = claim_text(div3_nodes, t6_value);
			div3_nodes.forEach(detach);
			t7 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t8 = claim_text(div4_nodes, t8_value);
			div4_nodes.forEach(detach);
			t9 = claim_space(div5_nodes);
			div5_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col-1");
			attr(div1, "class", "col-3");
			attr(div2, "class", "col-3");
			attr(div3, "class", "col-2");
			attr(div4, "class", "col-3");
			attr(div5, "class", "row tab-row my-3 svelte-1xxzw6s");
		},
		m(target, anchor) {
			insert_hydration(target, div5, anchor);
			append_hydration(div5, div0);
			append_hydration(div0, t0);
			append_hydration(div5, t1);
			append_hydration(div5, div1);
			append_hydration(div1, t2);
			append_hydration(div5, t3);
			append_hydration(div5, div2);
			append_hydration(div2, t4);
			append_hydration(div5, t5);
			append_hydration(div5, div3);
			append_hydration(div3, t6);
			append_hydration(div5, t7);
			append_hydration(div5, div4);
			append_hydration(div4, t8);
			append_hydration(div5, t9);
		},
		p(ctx, dirty) {
			if (dirty & /*events*/ 1 && t0_value !== (t0_value = /*item*/ ctx[13].txData.type + "")) set_data(t0, t0_value);
			if (dirty & /*events*/ 1 && t2_value !== (t2_value = truncate(/*item*/ ctx[13].txData.stxAddress) + "")) set_data(t2, t2_value);
			if (dirty & /*events*/ 1 && t4_value !== (t4_value = truncate(/*item*/ ctx[13].txData.sbtcWallet) + "")) set_data(t4, t4_value);
			if (dirty & /*events*/ 1 && t6_value !== (t6_value = /*item*/ ctx[13].txData.amountSats + "")) set_data(t6, t6_value);
			if (dirty & /*events*/ 1 && t8_value !== (t8_value = truncate(/*item*/ ctx[13].data.value) + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(div5);
		}
	};
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let p;
	let t0;
	let t1;
	let a0;
	let arrowrepeat;
	let t2;
	let userbalance;
	let t3;
	let div13;
	let div12;
	let div3;
	let div2;
	let a1;
	let t4;
	let t5;
	let div5;
	let div4;
	let a2;
	let t6;
	let t7;
	let div7;
	let div6;
	let a3;
	let t8;
	let t9;
	let div9;
	let div8;
	let a4;
	let t10;
	let t11;
	let div11;
	let div10;
	let a5;
	let t12;
	let t13;
	let current;
	let mounted;
	let dispose;
	arrowrepeat = new ArrowRepeat({ props: { width: 20, height: 20 } });
	userbalance = new UserBalance({ props: { showAddress: true } });

	function select_block_type(ctx, dirty) {
		if (!/*transactions*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			p = element("p");
			t0 = text("Transactions can be filtered and sorted.");
			t1 = space();
			a0 = element("a");
			create_component(arrowrepeat.$$.fragment);
			t2 = space();
			create_component(userbalance.$$.fragment);
			t3 = space();
			div13 = element("div");
			div12 = element("div");
			div3 = element("div");
			div2 = element("div");
			a1 = element("a");
			t4 = text("Type");
			t5 = space();
			div5 = element("div");
			div4 = element("div");
			a2 = element("a");
			t6 = text("DST");
			t7 = space();
			div7 = element("div");
			div6 = element("div");
			a3 = element("a");
			t8 = text("SBTC Wallet");
			t9 = space();
			div9 = element("div");
			div8 = element("div");
			a4 = element("a");
			t10 = text("Amount");
			t11 = space();
			div11 = element("div");
			div10 = element("div");
			a5 = element("a");
			t12 = text("TXID");
			t13 = space();
			if_block.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Transactions can be filtered and sorted.");
			p_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			a0 = claim_element(div0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			claim_component(arrowrepeat.$$.fragment, a0_nodes);
			a0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			claim_component(userbalance.$$.fragment, nodes);
			t3 = claim_space(nodes);
			div13 = claim_element(nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div3 = claim_element(div12_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a1 = claim_element(div2_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "Type");
			a1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t5 = claim_space(div12_nodes);
			div5 = claim_element(div12_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			a2 = claim_element(div4_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "DST");
			a2_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			t7 = claim_space(div12_nodes);
			div7 = claim_element(div12_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			a3 = claim_element(div6_nodes, "A", { href: true });
			var a3_nodes = children(a3);
			t8 = claim_text(a3_nodes, "SBTC Wallet");
			a3_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t9 = claim_space(div12_nodes);
			div9 = claim_element(div12_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			a4 = claim_element(div8_nodes, "A", { href: true });
			var a4_nodes = children(a4);
			t10 = claim_text(a4_nodes, "Amount");
			a4_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			t11 = claim_space(div12_nodes);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			a5 = claim_element(div10_nodes, "A", { href: true });
			var a5_nodes = children(a5);
			t12 = claim_text(a5_nodes, "TXID");
			a5_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			t13 = claim_space(div13_nodes);
			if_block.l(div13_nodes);
			div13_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "strapline");
			attr(a0, "href", "/");
			attr(a0, "class", "pointer text-info");
			attr(div0, "class", "d-flex justify-content-between");
			attr(div1, "class", "row");
			attr(a1, "href", "/");
			attr(div2, "class", "filter pointer ");
			attr(div3, "class", "col-1");
			attr(a2, "href", "/");
			attr(div4, "class", "filter pointer");
			attr(div5, "class", "col-3");
			attr(a3, "href", "/");
			attr(div6, "class", "filter pointer");
			attr(div7, "class", "col-3");
			attr(a4, "href", "/");
			attr(div8, "class", "filter pointer");
			attr(div9, "class", "col-2");
			attr(a5, "href", "/");
			attr(div10, "class", "filter pointer");
			attr(div11, "class", "col-3");
			attr(div12, "class", "row");
			attr(div13, "class", "text-white");
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);
			append_hydration(div1, div0);
			append_hydration(div0, p);
			append_hydration(p, t0);
			append_hydration(div0, t1);
			append_hydration(div0, a0);
			mount_component(arrowrepeat, a0, null);
			insert_hydration(target, t2, anchor);
			mount_component(userbalance, target, anchor);
			insert_hydration(target, t3, anchor);
			insert_hydration(target, div13, anchor);
			append_hydration(div13, div12);
			append_hydration(div12, div3);
			append_hydration(div3, div2);
			append_hydration(div2, a1);
			append_hydration(a1, t4);
			append_hydration(div12, t5);
			append_hydration(div12, div5);
			append_hydration(div5, div4);
			append_hydration(div4, a2);
			append_hydration(a2, t6);
			append_hydration(div12, t7);
			append_hydration(div12, div7);
			append_hydration(div7, div6);
			append_hydration(div6, a3);
			append_hydration(a3, t8);
			append_hydration(div12, t9);
			append_hydration(div12, div9);
			append_hydration(div9, div8);
			append_hydration(div8, a4);
			append_hydration(a4, t10);
			append_hydration(div12, t11);
			append_hydration(div12, div11);
			append_hydration(div11, div10);
			append_hydration(div10, a5);
			append_hydration(a5, t12);
			append_hydration(div13, t13);
			if_block.m(div13, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a0, "click", prevent_default(/*click_handler*/ ctx[4])),
					listen(a1, "click", prevent_default(/*click_handler_1*/ ctx[5])),
					listen(a2, "click", prevent_default(/*click_handler_2*/ ctx[6])),
					listen(a3, "click", prevent_default(/*click_handler_3*/ ctx[7])),
					listen(a4, "click", prevent_default(/*click_handler_4*/ ctx[8])),
					listen(a5, "click", prevent_default(/*click_handler_5*/ ctx[9]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div13, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(arrowrepeat.$$.fragment, local);
			transition_in(userbalance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(arrowrepeat.$$.fragment, local);
			transition_out(userbalance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(arrowrepeat);
			if (detaching) detach(t2);
			destroy_component(userbalance, detaching);
			if (detaching) detach(t3);
			if (detaching) detach(div13);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let events = [];
	let transactions = false;

	const fetchTxs = async () => {
		$$invalidate(0, events = await readEvents());

		for (let event of events) {
			event.txData = await readTx(event.data.value);
		}

		console.log('events: ', events);
		$$invalidate(1, transactions = true);
	};

	const reorder = sf => {
	};

	onMount(async () => {
		fetchTxs();
	});

	const click_handler = () => fetchTxs();
	const click_handler_1 = () => reorder();
	const click_handler_2 = () => reorder();
	const click_handler_3 = () => reorder();
	const click_handler_4 = () => reorder();
	const click_handler_5 = () => reorder();

	return [
		events,
		transactions,
		fetchTxs,
		reorder,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5
	];
}

class SbtcContractTransactions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment$1, safe_not_equal, {});
	}
}

const _page_svelte_svelte_type_style_lang = '';

/* src/routes/history/+page.svelte generated by Svelte v3.55.1 */

function create_fragment(ctx) {
	let section;
	let div3;
	let div2;
	let div1;
	let div0;
	let h1;
	let span;
	let t0;
	let t1;
	let t2;
	let sbtccontracttransactions;
	let current;
	sbtccontracttransactions = new SbtcContractTransactions({});

	return {
		c() {
			section = element("section");
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			span = element("span");
			t0 = text("SBTC");
			t1 = text(" Transaction History");
			t2 = space();
			create_component(sbtccontracttransactions.$$.fragment);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			span = claim_element(h1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "SBTC");
			span_nodes.forEach(detach);
			t1 = claim_text(h1_nodes, " Transaction History");
			h1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			claim_component(sbtccontracttransactions.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "strokeme-white");
			attr(h1, "class", "pointer text-white svelte-yi74xp");
			attr(div0, "class", "d-flex justify-content-between");
			attr(div1, "class", "row");
			attr(div2, "class", "card-width");
			attr(div3, "class", "my-4 p-4");
			attr(section, "class", "bg-dark svelte-yi74xp");
		},
		m(target, anchor) {
			insert_hydration(target, section, anchor);
			append_hydration(section, div3);
			append_hydration(div3, div2);
			append_hydration(div2, div1);
			append_hydration(div1, div0);
			append_hydration(div0, h1);
			append_hydration(h1, span);
			append_hydration(span, t0);
			append_hydration(h1, t1);
			append_hydration(div2, t2);
			mount_component(sbtccontracttransactions, div2, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(sbtccontracttransactions.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sbtccontracttransactions.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(sbtccontracttransactions);
		}
	};
}

class Page extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export { Page as default };
